function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-Apr-2018 17:50:43.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 9xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [-1;-1;-1;-1;-1;-1;-1;-1;0];
x1_step1_gain = [1;1;1;1;1;1;1;1;2];
x1_step1_ymin = -1;

% Layer 1
b1 = [1.3193744500296254;1.776432955000071;-0.16819147749470584;-0.57520093763872226;-0.19623613077316862;0.41418669192189311;0.58041455088959837;-1.2227849463386817;-1.8022217846122019;-1.9909667572523373];
IW1_1 = [-2.4479260039507076 -0.07028117356044139 -0.20485888870917762 0.14934345444087052 0.38761875843918214 0.028590835810097755 0.07849883539639442 0.16308803446566042 0.27761142209597556;-1.159339532347831 -0.81685034300476789 0.8911318954672468 0.15031286791422152 -0.37822502076316444 -0.15007813473844331 0.026089739735268493 0.10184597535969599 -0.42378879565136418;-0.51708448595950163 -0.70770428020798593 -1.4638169837499699 -1.7224371941136174 -0.7851171689755343 0.062066166789754566 0.282507947776099 -0.13014769047985286 -0.30423271122597989;-0.018121924253461395 -0.96608369643072367 -1.2128727618506794 -0.37561417234102046 -0.34180369984741066 0.13565458497078367 -0.4580207354055979 -0.22870247680187061 -0.031358652298848794;0.56751165832334016 0.7503564526841453 -0.50048075841018436 -0.51118717935038827 -0.25465065591522706 0.33205942611891331 0.52931884973939181 0.5885148105540412 -0.76380209461734883;0.77998316443271654 0.38005445182719622 -0.73954379881539023 -0.56835318800580803 -0.34821497602885215 -0.82940572076345731 0.41780283168025573 0.078406307056850436 0.018107228055108414;1.0440309405913468 -0.013509580145024191 0.64435609598473098 -0.42658264215435415 -0.026335977278232094 0.066612613400299503 -0.57886602697305489 0.45010125660752554 -0.74556436186176345;-0.88112750777059801 0.36559914885251071 -0.54484238535004959 0.27705877736721252 -0.57818665730934637 -0.43999371052065406 -0.19641917677912146 0.55143534977337749 0.43628629208790526;-0.73911341104998363 -0.42216984257498996 0.50438688872405391 0.2013080033164045 -0.78424506103128533 0.58348492394337614 -0.33569110000384961 0.50412027529803416 0.56168826631716184;-0.84639970516677143 -0.77527191294718267 0.42800497319185732 0.29245501509716582 0.99678692767901211 -0.10201728647519361 0.034936059660871814 -0.29346537088285179 0.77417323916774061];

% Layer 2
b2 = [-0.38609299735954777;-0.82102167886495692;0.18063525943205955];
LW2_1 = [0.53180430382387323 0.35299071590563552 -0.052502616552163692 0.57842131240506167 -0.013026174474062102 0.13652718055432961 -0.056394290348572365 -0.38686070057542921 0.28837569671144003 0.025937873522436431;0.036653854937301389 -0.028067938767709962 0.45471474378698323 -0.37289855733047578 -0.012549631070580086 -0.027717736787698583 0.25320584921727629 0.097408800725233446 -0.21626482023771648 0.39880868418546511;-0.59768674428910651 -0.25431528224552968 -0.37149891122666534 -0.25911583893269474 0.11081917687971522 -0.1966766242408659 -0.30812564048300195 0.19557027091034523 -0.016446571149452638 -0.39318953130167072];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = [2;2;2];
y1_step1_xoffset = [0;0;0];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
